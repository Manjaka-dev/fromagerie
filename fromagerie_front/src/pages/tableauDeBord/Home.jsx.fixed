import React, { useState, useEffect } from 'react';
import { Link, NavLink } from 'react-router-dom';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
import {
  BarChart3,
  Package,
  TrendingDown,
  TrendingUp,
  Calculator,
  ShoppingCart,
  Truck,
  Settings,
  Factory,
  Calendar,
  Clock,
  User,
  ChevronDown,
  Bell,
  Search,
  Filter,
  X,
  MoreHorizontal,
  AlertTriangle
} from 'lucide-react';
import './../../assets/styles/tableauDeBord/home.css';
import SidebarMenu from "../../components/SidebarMenu";
import { dashboardAPI, formatCurrency, formatDate } from '../../services/api';

const TableauDeBord = () => {
  const [activeMenuItem, setActiveMenuItem] = useState('Tableau de Bord');
  const [showFilters, setShowFilters] = useState(false);
  const [searchName, setSearchName] = useState('');
  const [searchDate, setSearchDate] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('');
  
  // États pour les données du dashboard
  const [statsGlobales, setStatsGlobales] = useState(null);
  const [productionsRecent, setProductionsRecent] = useState([]);
  const [livraisonsPlanifiees, setLivraisonsPlanifiees] = useState([]);
  const [loadingStats, setLoadingStats] = useState(true);
  const [loadingProductions, setLoadingProductions] = useState(true);
  const [loadingLivraisons, setLoadingLivraisons] = useState(true);
  const [error, setError] = useState(null);

  // Fonction pour charger les données depuis l'API
  useEffect(() => {
    // Récupérer les statistiques globales
    const fetchStatsGlobales = async () => {
      try {
        setLoadingStats(true);
        const data = await dashboardAPI.getStatsGlobales();
        setStatsGlobales(data);
        setLoadingStats(false);
      } catch (err) {
        console.error("Erreur lors du chargement des statistiques globales:", err);
        setError(err.message);
        setLoadingStats(false);
      }
    };

    // Récupérer les productions récentes
    const fetchProductionsRecent = async () => {
      try {
        setLoadingProductions(true);
        const data = await dashboardAPI.getProductionsRecent();
        setProductionsRecent(data);
        setLoadingProductions(false);
      } catch (err) {
        console.error("Erreur lors du chargement des productions récentes:", err);
        setError(err.message);
        setLoadingProductions(false);
      }
    };

    // Récupérer les livraisons planifiées
    const fetchLivraisonsPlanifiees = async () => {
      try {
        setLoadingLivraisons(true);
        const data = await dashboardAPI.getLivraisonsPlanifiees();
        setLivraisonsPlanifiees(data);
        setLoadingLivraisons(false);
      } catch (err) {
        console.error("Erreur lors du chargement des livraisons planifiées:", err);
        setError(err.message);
        setLoadingLivraisons(false);
      }
    };

    fetchStatsGlobales();
    fetchProductionsRecent();
    fetchLivraisonsPlanifiees();
  }, []);

  // État pour la recherche globale
  const [searchQuery, setSearchQuery] = useState('');

  // --------------------------------------------------
  // Filtrer les données en fonction de la période sélectionnée
  const [selectedPeriod, setSelectedPeriod] = useState('mois');

  // Données pour le graphique en secteurs de production
  const productionData = statsGlobales ? [
    { name: 'Prod Hebdomadaires', value: statsGlobales.productionsHebdomadaires || 0, color: '#1f2937' },
    { name: 'Taux de qualité', value: statsGlobales.tauxQualite || 0, color: '#60a5fa' },
    { name: 'Livraisons planifié', value: statsGlobales.livraisonsPlanifiees || 0, color: '#86efac' }
  ] : [];
  // --------------------------------------------------
  // Ajoutez ces données avec les autres données statiques
  const topClients = statsGlobales?.topClients || [
    { name: 'Epicerie Bio Lyon', quantity: 250, value: 12500 },
    { name: 'Fromagerie Martin', quantity: 180, value: 9000 },
    { name: 'Marché de Belleville', quantity: 150, value: 7500 }
  ];
  // ---------------------------------------------
  // Données des livraisons (étendues pour la démonstration)
  const allLivraisons = livraisonsPlanifiees || [
    { name: 'Epicerie Bio Lyon', quantity: '50 kg', date: '12 Juin à 09:00', status: 'Confirmé' },
    { name: 'Fromagerie Martin', quantity: '75 kg', date: '13 Juin à 14:30', status: 'Préparation' },
    { name: 'Marché de Belleville', quantity: '30 kg', date: '14 Juin à 08:00', status: 'Préparation' },
    { name: 'Restaurant Le Gourmet', quantity: '25 kg', date: '15 Juin à 16:00', status: 'Confirmé' }
  ];

  // Fonction de filtrage
  const getFilteredLivraisons = () => {
    return allLivraisons.filter(livraison => {
      const matchesName = livraison.name.toLowerCase().includes(searchName.toLowerCase());
      const matchesDate = searchDate === '' || livraison.date.includes(searchDate);
      const matchesStatus = selectedStatus === '' || livraison.status === selectedStatus;

      return matchesName && matchesDate && matchesStatus;
    });
  };

  const clearFilters = () => {
    setSearchName('');
    setSearchDate('');
    setSelectedStatus('');
  };

  // ------------------------------------------------------
  // Données statiques pour les graphiques
  const caData = statsGlobales?.caData || [
    { name: 'Jan', value: 1200 },
    { name: 'Fév', value: 1900 },
    { name: 'Mar', value: 2000 },
    { name: 'Avr', value: 2780 },
    { name: 'Mai', value: 1890 },
    { name: 'Juin', value: 2390 },
    { name: 'Juil', value: 3490 }
  ];

  const filteredCaData = statsGlobales?.filteredCaData || caData.slice(-7); // Prendre les 7 dernières entrées par défaut

  const productionStats = statsGlobales?.productionStats || [
    { name: 'Gouda Fermier', value: 45, target: 55, fill: '#0088FE', performance: 82 },
    { name: 'Gouda Affiné', value: 25, target: 30, fill: '#00C49F', performance: 83 },
    { name: 'Gouda Truffé', value: 15, target: 20, fill: '#FFBB28', performance: 75 },
    { name: 'Gouda Fumé', value: 10, target: 15, fill: '#FF8042', performance: 67 },
    { name: 'Gouda aux Herbes', value: 35, target: 40, fill: '#8884d8', performance: 88 }
  ];

  // Filtrer par période
  const filterByPeriod = (period) => {
    setSelectedPeriod(period);
    // Ici vous pourriez avoir une logique pour ajuster les données affichées selon la période
    // Par exemple, récupérer des données différentes de l'API ou filtrer les données existantes
  };

  // -------------------------------------------------------------
  // Données de filtre de date
  const [showDateFilterPopup, setShowDateFilterPopup] = useState(false);
  const [startDate, setStartDate] = useState('2023-06-01');
  const [endDate, setEndDate] = useState(formatDate(new Date()));
  const [tempStartDate, setTempStartDate] = useState(startDate);
  const [tempEndDate, setTempEndDate] = useState(endDate);

  const hasDateChanged = tempStartDate !== startDate || tempEndDate !== endDate;

  const handleApplyDateFilter = () => {
    setStartDate(tempStartDate);
    setEndDate(tempEndDate);
    // Ici vous pouvez ajouter un appel API ou filtrer les données locales
    fetchDataForDateRange(tempStartDate, tempEndDate);
  };

  // Fonction utilitaire pour formater la date au format YYYY-MM-DD
  function formatDate(date) {
    const d = new Date(date);
    let month = '' + (d.getMonth() + 1);
    let day = '' + d.getDate();
    const year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
  }

  // Fonction fictive pour récupérer des données pour une plage de dates
  const fetchDataForDateRange = (start, end) => {
    console.log(`Fetching data from ${start} to ${end}`);
    // Ici vous mettriez normalement votre appel API
  };

  // ---------------------------------------------
  // Calcul des KPI
  const totalCAValue = filteredCaData.reduce((sum, item) => sum + item.value, 0);
  const averageCAValue = totalCAValue / filteredCaData.length;
  const previousTotalCA = 13500; // Valeur fictive du CA total précédent
  const caEvolution = ((totalCAValue - previousTotalCA) / previousTotalCA * 100).toFixed(1);

  const LoadingSpinner = () => (
    <div className="loading-spinner">
      <div className="spinner"></div>
      <p>Chargement des données...</p>
    </div>
  );

  // Données pour le graphique des pertes
  const [selectedLossType, setSelectedLossType] = useState('all');

  // Données fictives des pertes de production
  const lossData = [
    {
      period: 'Lun',
      production: 120,
      deterioration: 8,
      defauts: 5,
      total: 13
    },
    {
      period: 'Mar',
      production: 132,
      deterioration: 6,
      defauts: 7,
      total: 13
    },
    {
      period: 'Mer',
      production: 101,
      deterioration: 11,
      defauts: 2,
      total: 13
    },
    {
      period: 'Jeu',
      production: 134,
      deterioration: 5,
      defauts: 9,
      total: 14
    },
    {
      period: 'Ven',
      production: 90,
      deterioration: 10,
      defauts: 8,
      total: 18
    },
    {
      period: 'Sam',
      production: 110,
      deterioration: 9,
      defauts: 7,
      total: 16
    },
    {
      period: 'Dim',
      production: 85,
      deterioration: 4,
      defauts: 3,
      total: 7
    }
  ];

  const lossTypeData = [
    { name: 'Détérioration', count: 53, value: 65, color: '#ef4444' },
    { name: 'Défauts qualité', count: 28, value: 35, color: '#f97316' }
  ];

  const totalProduction = lossData.reduce((sum, item) => sum + item.production, 0);
  const totalLosses = lossData.reduce((sum, item) => sum + item.total, 0);
  const lossPercentage = ((totalLosses / totalProduction) * 100).toFixed(1);
  const averageDailyLoss = (totalLosses / lossData.length).toFixed(1);
  const previousPeriodLoss = 95;
  const lossEvolution = ((totalLosses - previousPeriodLoss) / previousPeriodLoss * 100).toFixed(1);

  const lossTypeColors = {
    deterioration: '#ef4444',  // Rouge
    defauts: '#f97316',       // Orange
  };

  const lossTypeLabels = {
    deterioration: 'Détérioration',
    defauts: 'Défauts qualité'
  };
  // ---------------------------------------------------------

  // Données des bénéfices
  const benefitData = statsGlobales ? [
    {
      period: 'Journalier',
      value: statsGlobales.beneficeJournalier || 0,
      trend: statsGlobales.tendanceBeneficeJournalier || 0,
      isPositive: statsGlobales.tendanceBeneficeJournalier > 0,
      icon: statsGlobales.tendanceBeneficeJournalier > 0 ? TrendingUp : TrendingDown,
      comparison: 'vs hier'
    },
    {
      period: 'Hebdomadaire',
      value: statsGlobales.beneficeHebdomadaire || 0,
      trend: statsGlobales.tendanceBeneficeHebdomadaire || 0,
      isPositive: statsGlobales.tendanceBeneficeHebdomadaire > 0,
      icon: statsGlobales.tendanceBeneficeHebdomadaire > 0 ? TrendingUp : TrendingDown,
      comparison: 'vs semaine dernière'
    },
    {
      period: 'Mensuel',
      value: statsGlobales.beneficeMensuel || 0,
      trend: statsGlobales.tendanceBeneficeMensuel || 0,
      isPositive: statsGlobales.tendanceBeneficeMensuel > 0,
      icon: statsGlobales.tendanceBeneficeMensuel > 0 ? TrendingUp : TrendingDown,
      comparison: 'vs mois dernier'
    },
    {
      period: 'Annuel',
      value: statsGlobales.beneficeAnnuel || 0,
      trend: statsGlobales.tendanceBeneficeAnnuel || 0,
      isPositive: statsGlobales.tendanceBeneficeAnnuel > 0,
      icon: statsGlobales.tendanceBeneficeAnnuel > 0 ? TrendingUp : TrendingDown,
      comparison: 'vs année dernière'
    }
  ] : [
    {
      period: 'Journalier',
      value: 1250,
      trend: 3.2,
      isPositive: true,
      icon: TrendingUp,
      comparison: 'vs hier'
    },
    {
      period: 'Hebdomadaire',
      value: 8750,
      trend: -1.8,
      isPositive: false,
      icon: TrendingDown,
      comparison: 'vs semaine dernière'
    },
    {
      period: 'Mensuel',
      value: 35000,
      trend: 5.4,
      isPositive: true,
      icon: TrendingUp,
      comparison: 'vs mois dernier'
    },
    {
      period: 'Annuel',
      value: 420000,
      trend: 12.7,
      isPositive: true,
      icon: TrendingUp,
      comparison: 'vs année dernière'
    }
  ];
  // -------------------------------------------------------------

  return (
    <div className="dashboard-container">
      {/* Sidebar */}
      <div className="sidebar">
        <div className="sidebar-header">
          <h1 className="app-title">CheeseFlow</h1>
          <p className="app-subtitle">Production</p>
          <p className="app-subtitle">Gouda Artisanale</p>
        </div>

        <SidebarMenu />
      </div>

      {/* Main Content */}
      <div className="main-content">
        {/* Header */}
        <header className="header">
          <div className="header-content">
            <div className="header-left">
              <div className="update-info">
                • Mise à jour: 11 Juin 2025, 14:30
              </div>
            </div>
            {/* Barre de recherche centrée avec Lucide Search icon */}
            <Search className="search-icon" size={18} />
            <input
              type="text"
              placeholder="Rechercher des produits, références..."
              className="search_input"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            {/* {searchQuery && (
              <X
                className="clear-search-icon"
                size={18}
                onClick={() => setSearchQuery('')}
              />
            )} */}

            <div className="header-right">
              <div className="action-button">
                <Filter size={18} />
              </div>
              <div className="action-button">
                <Bell size={18} />
                <span className="notification-badge">3</span>
              </div>
              <div className="user-profile">
                <User size={18} />
              </div>
            </div>
          </div>
        </header>

        {/* Dashboard Content */}
        <div className="dashboard-content">
          {/* Titre de la page */}
          <div className="page-title-container">
            <h1 className="page-title">Tableau de bord</h1>
            <div className="date-filter-container">
              <div
                className="date-filter"
                onClick={() => setShowDateFilterPopup(!showDateFilterPopup)}
              >
                <Calendar size={16} />
                <span>{startDate} à {endDate}</span>
                <ChevronDown size={16} />
              </div>

              {showDateFilterPopup && (
                <div className="date-filter-popup">
                  <div className="date-inputs">
                    <div className="date-input-group">
                      <label>Date de début</label>
                      <input
                        type="date"
                        value={tempStartDate}
                        onChange={(e) => setTempStartDate(e.target.value)}
                      />
                    </div>
                    <div className="date-input-group">
                      <label>Date de fin</label>
                      <input
                        type="date"
                        value={tempEndDate}
                        onChange={(e) => setTempEndDate(e.target.value)}
                      />
                    </div>
                  </div>
                  <div className="date-filter-actions">
                    <button
                      className={`apply-button ${!hasDateChanged ? 'disabled' : ''}`}
                      onClick={handleApplyDateFilter}
                      disabled={!hasDateChanged}
                    >
                      Appliquer
                    </button>
                    <button
                      className="cancel-button"
                      onClick={() => setShowDateFilterPopup(false)}
                    >
                      Annuler
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* KPIs */}
          <div className="kpi-cards">
            {loadingStats ? (
              <div className="loading-container">
                <LoadingSpinner />
              </div>
            ) : error ? (
              <div className="error-message">
                <AlertTriangle size={24} />
                <p>Erreur lors du chargement des statistiques: {error}</p>
              </div>
            ) : (
              <>
                <div className="kpi-card">
                  <div className="kpi-icon production-icon">
                    <Factory size={24} />
                  </div>
                  <div className="kpi-content">
                    <h3 className="kpi-title">Production totale</h3>
                    <div className="kpi-value">{statsGlobales?.productionTotale || 0} kg</div>
                    <div className={`kpi-trend ${statsGlobales?.tendanceProduction > 0 ? 'positive' : 'negative'}`}>
                      {statsGlobales?.tendanceProduction > 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
                      <span>{Math.abs(statsGlobales?.tendanceProduction || 0)}% vs hier</span>
                    </div>
                  </div>
                </div>

                <div className="kpi-card">
                  <div className="kpi-icon revenue-icon">
                    <Calculator size={24} />
                  </div>
                  <div className="kpi-content">
                    <h3 className="kpi-title">Chiffre d'affaires</h3>
                    <div className="kpi-value">{formatCurrency(statsGlobales?.chiffreAffaires || 0)}</div>
                    <div className={`kpi-trend ${statsGlobales?.tendanceCA > 0 ? 'positive' : 'negative'}`}>
                      {statsGlobales?.tendanceCA > 0 ? <TrendingUp size={16} /> : <TrendingDown size={16} />}
                      <span>{Math.abs(statsGlobales?.tendanceCA || 0)}% vs dernier mois</span>
                    </div>
                  </div>
                </div>

                <div className="kpi-card">
                  <div className="kpi-icon orders-icon">
                    <ShoppingCart size={24} />
                  </div>
                  <div className="kpi-content">
                    <h3 className="kpi-title">Commandes en attente</h3>
                    <div className="kpi-value">{statsGlobales?.commandesEnAttente || 0}</div>
                    <div className="kpi-detail">
                      <span>Valeur: {formatCurrency(statsGlobales?.valeurCommandesEnAttente || 0)}</span>
                    </div>
                  </div>
                </div>

                <div className="kpi-card">
                  <div className="kpi-icon delivery-icon">
                    <Truck size={24} />
                  </div>
                  <div className="kpi-content">
                    <h3 className="kpi-title">Livraisons planifiées</h3>
                    <div className="kpi-value">{statsGlobales?.livraisonsPlanifiees || 0}</div>
                    <div className="kpi-detail">
                      <Clock size={14} />
                      <span>Prochaine: {statsGlobales?.prochaineLivraison || "Aucune"}</span>
                    </div>
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Statistiques de bénéfices */}
          <div className="profit-statistics-section">
            <div className="card">
              {/* En-tête de la section */}
              <div className="card-header">
                <div className="profit-header">
                  <div className="profit-title-group">
                    <TrendingUp className="profit-icon" />
                    <h3 className="section-title">Statistique des bénéfices</h3>
                  </div>
                  <div className="period-tabs">
                    <button
                      className={selectedPeriod === 'jour' ? 'active' : ''}
                      onClick={() => filterByPeriod('jour')}
                    >
                      Jour
                    </button>
                    <button
                      className={selectedPeriod === 'semaine' ? 'active' : ''}
                      onClick={() => filterByPeriod('semaine')}
                    >
                      Semaine
                    </button>
                    <button
                      className={selectedPeriod === 'mois' ? 'active' : ''}
                      onClick={() => filterByPeriod('mois')}
                    >
                      Mois
                    </button>
                    <button
                      className={selectedPeriod === 'année' ? 'active' : ''}
                      onClick={() => filterByPeriod('année')}
                    >
                      Année
                    </button>
                  </div>
                </div>
              </div>

              {/* Contenu des bénéfices */}
              <div className="profit-content">
                {/* Graphique à barres du CA */}
                <div className="bar-chart-container">
                  <div className="chart-header">
                    <h4 className="chart-title">Chiffre d'affaires</h4>
                    <div className="chart-summary">
                      <div className="summary-item">
                        <span className="summary-label">Total:</span>
                        <span className="summary-value">{formatCurrency(totalCAValue)}</span>
                      </div>
                      <div className="summary-item">
                        <span className="summary-label">Moyenne:</span>
                        <span className="summary-value">{formatCurrency(averageCAValue)}</span>
                      </div>
                      <div className={`summary-item trend ${caEvolution > 0 ? 'positive' : 'negative'}`}>
                        <span className="summary-label">Évolution:</span>
                        <span className="summary-value">
                          {caEvolution > 0 ? '+' : ''}{caEvolution}%
                        </span>
                      </div>
                    </div>
                  </div>

                  <ResponsiveContainer width="100%" height={250}>
                    <BarChart
                      data={filteredCaData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(0, 0, 0, 0.1)" />
                      <XAxis
                        dataKey="name"
                        axisLine={false}
                        tickLine={false}
                        tick={{ fontSize: 12, fill: '#6b7280' }}
                      />
                      <YAxis
                        axisLine={false}
                        tickLine={false}
                        tick={{ fontSize: 12, fill: '#6b7280' }}
                        tickFormatter={(value) => `${value / 1000}k`}
                      />
                      <Tooltip
                        formatter={(value) => [`${value} Ar`, 'CA']}
                        labelStyle={{ color: '#2c3e50' }}
                        contentStyle={{
                          backgroundColor: 'rgba(255, 255, 255, 0.95)',
                          border: '1px solid rgba(75, 192, 192, 0.2)',
                          borderRadius: '8px',
                          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
                        }}
                      />
                      <Bar
                        dataKey="value"
                        radius={[4, 4, 0, 0]}
                      >
                        {filteredCaData.map((entry, index) => {
                          const values = filteredCaData.map(item => item.value);
                          const max = Math.max(...values);
                          const min = Math.min(...values);
                          const moyenne = values.reduce((a, b) => a + b, 0) / values.length;

                          let fillColor;
                          if (entry.value === max) {
                            fillColor = 'rgba(79, 168, 76, 0.64)'; // Vert foncé pour le CA max
                          } else if (entry.value === min) {
                            fillColor = 'rgba(190, 4, 4, 0.79)'; // Rouge pour le CA min
                          } else if (Math.abs(entry.value - moyenne) < (max - min) * 0.1) {
                            fillColor = 'rgba(254, 166, 3, 0.68)'; // Bleu pour les valeurs proches de la moyenne
                          } else {
                            fillColor = 'rgba(254, 166, 3, 0.68)'; // gris pour les autres valeurs
                          }

                          return <Cell key={`cell-${index}`} fill={fillColor} />;
                        })}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
          {/* ------------------------------------------------------------------------------ */}

          {/* Statistique de PERTES */}
          <div className="loss-statistics-section">
            <div className="card">
              {/* En-tête de la section */}
              <div className="card-header">
                <div className="loss-header">
                  <div className="loss-title-group">
                    <TrendingDown className="loss-icon" />
                    <h3 className="section-title">Statistique d'évolution de perte</h3>
                  </div>
                </div>
              </div>
              
              {loadingProductions ? (
                <LoadingSpinner />
              ) : error ? (
                <div className="error-message">
                  <AlertTriangle size={24} />
                  <p>Erreur lors du chargement des données de production: {error}</p>
                </div>
              ) : (
                <div className="loss-content">
                  {/* Graphique linéaire d'évolution */}
                  <div className="loss-chart-container">
                    <div className="chart-header">
                      <h4 className="chart-title">Évolution des pertes</h4>
                      <div className="chart-controls">
                        <select
                          value={selectedLossType}
                          onChange={(e) => setSelectedLossType(e.target.value)}
                          className="loss-type-select"
                        >
                          <option value="deterioration">Détérioration</option>
                          <option value="defauts">Défauts qualité</option>
                        </select>
                      </div>
                    </div>

                    <div className="line-chart-wrapper">
                      <ResponsiveContainer width="100%" height={250}>
                        <LineChart data={lossData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                          <CartesianGrid strokeDasharray="3 3" stroke="rgba(0, 0, 0, 0.1)" />
                          <XAxis
                            dataKey="period"
                            axisLine={false}
                            tickLine={false}
                            tick={{ fontSize: 12, fill: '#6b7280' }}
                          />
                          <YAxis
                            axisLine={false}
                            tickLine={false}
                            tick={{ fontSize: 12, fill: '#6b7280' }}
                            label={{ value: 'kg', angle: -90, position: 'insideLeft' }}
                          />
                          <Tooltip
                            formatter={(value, name) => [`${value} kg`, lossTypeLabels[name]]}
                            labelFormatter={(label) => label}
                          />

                          {selectedLossType === 'all' ? (
                            // Afficher toutes les lignes
                            <>
                              <Line
                                type="monotone"
                                dataKey="deterioration"
                                stroke={lossTypeColors.deterioration}
                                strokeWidth={2}
                                name="deterioration"
                                dot={{ fill: lossTypeColors.deterioration, r: 4 }}
                              />
                              <Line
                                type="monotone"
                                dataKey="defauts"
                                stroke={lossTypeColors.defauts}
                                strokeWidth={2}
                                name="defauts"
                                dot={{ fill: lossTypeColors.defauts, r: 4 }}
                              />
                            </>
                          ) : (
                            // Afficher seulement la ligne sélectionnée
                            <Line
                              type="monotone"
                              dataKey={selectedLossType}
                              stroke={lossTypeColors[selectedLossType]}
                              strokeWidth={3}
                              name={selectedLossType}
                              dot={{ fill: lossTypeColors[selectedLossType], r: 6 }}
                            />
                          )}
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                  </div>

                  {/* Répartition par type de perte */}
                  <div className="loss-breakdown">
                    <div className="breakdown-header">
                      <h4 className="chart-title">Répartition par type de perte</h4>
                      <div className="breakdown-total">
                        Total: {lossTypeData.reduce((sum, item) => sum + item.count, 0)} incidents
                      </div>
                    </div>

                    <div className="breakdown-list">
                      {lossTypeData.map((item, index) => (
                        <div key={index} className="breakdown-item">
                          <div className="breakdown-info">
                            <div className="breakdown-name">
                              <div
                                className="breakdown-indicator"
                                style={{ backgroundColor: item.color }}
                              ></div>
                              <span>{item.name}</span>
                            </div>
                            <div className="breakdown-count">{item.count} cas</div>
                          </div>

                          <div className="breakdown-bar-container">
                            <div
                              className="breakdown-bar"
                              style={{
                                width: `${item.value}%`,
                                backgroundColor: item.color
                              }}
                            ></div>
                            <span className="breakdown-percentage">{item.value}%</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
              
              {/* Alertes et recommandations */}
              <div className="loss-alerts">
                <div className="alert-item alert-warning">
                  <AlertTriangle className="alert-icon" />
                  <div className="alert-content">
                    <div className="alert-title">Attention: Augmentation des pertes détectée</div>
                    <div className="alert-message">
                      Les pertes par détérioration ont augmenté de 15% cette semaine.
                      Vérifiez les conditions de stockage.
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export { TableauDeBord };
